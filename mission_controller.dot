digraph BehavioralTree {
    // Define the nodes (leafs and control nodes)

    // Circular leaf nodes
    node [shape=ellipse, style=filled, fillcolor=lightgray];

    // Define the "sequenceShape" with a larger arrow label
    sequenceShape [label=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0">
      <TR><TD PORT="arrow">→</TD></TR>
    </TABLE>>, shape=box];

    // Define the "parallelShape" with two parallel arrows
    parallelShape [label=<<TABLE BORDER="0" CELLBORDER="0" CELLSPACING="0">
      <TR><TD PORT="arrow1">→</TD></TR>
      <TR><TD PORT="arrow2">→</TD></TR>
    </TABLE>>, shape=box];

    // Leaf nodes
    PP_Client [label="Path Planner\nAction Client"];
    LP_client [label="Local Planner\nAction Client"];
    Contr_client [label="Controller\nAction Client"]; // You can specify the actual action here

    // Control nodes
    Root [label="Root", shape=box];
    Task1 [label="Task1", shape=box];
    Task2 [label="Task2", shape=box];

    Root->sequenceShape
    sequenceShape->Task1;
    sequenceShape->Task2;
    // Add any other control nodes if necessary


    // Define the edges between nodes
    Task1 -> parallelShape -> PP_Client;
    parallelShape-> LP_client;
    parallelShape->Contr_client;

    // server nodes
    PP_server [label="Path Planner\nAction Server"];
    LP_server [label="Local Planner\nAction Server"];
    Contr_server [label="Controller\nAction Server"]; // You can specify the actual action here

    // Define the edges between nodes
    PP_Client -> PP_server;PP_server ->PP_Client;
    LP_client -> LP_server;LP_server ->LP_client;
    Contr_client -> Contr_server;Contr_server ->Contr_client;
}